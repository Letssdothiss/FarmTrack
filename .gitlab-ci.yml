stages:
  - build
  - test
  - deploy

variables:
  DOCKER_DRIVER: overlay2

# Cache dependencies between jobs
cache:
  paths:
    - packages/frontend/node_modules/
    - packages/backend/node_modules/

# Build frontend
build-frontend:
  stage: build
  image: node:20-alpine
  script:
    - cd packages/frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - packages/frontend/dist/

# Build backend
build-backend:
  stage: build
  image: node:20-alpine
  script:
    - cd packages/backend
    - npm install
    - npm run build
  artifacts:
    paths:
      - packages/backend/dist/

# Test frontend
test-frontend-lint:
  stage: test
  image: node:20-alpine
  script:
    - cd packages/frontend
    - npm install
    - npm run lint
  only:
    - main

# Test frontend with Vitest
test-frontend:
  stage: test
  image: node:20-alpine
  script:
    - cd packages/frontend
    - npm install
    - npm test
  only:
    - main

# Test backend linting
test-backend-lint:
  stage: test
  image: node:20-alpine
  script:
    - cd packages/backend
    - npm install
    - npm run lint
  only:
    - main

# Test backend with Jest
test-backend:
  stage: test
  image: node:20-alpine
  services:
    - name: mongo:latest
      alias: mongo
      variables:
        MONGO_INITDB_DATABASE: test
  variables:
    MONGODB_URI: mongodb://mongo:27017/test
  before_script:
    - apk add --no-cache mongodb-tools
    - until mongosh --host mongo --eval "db.adminCommand('ping')" > /dev/null 2>&1; do
        echo "Waiting for MongoDB to be ready...";
        sleep 2;
      done
    - echo "MongoDB is ready!"
  script:
    - cd packages/backend
    - npm install
    - npm test
  only:
    - main

# Deploy to production
deploy:
  stage: deploy
  image: node:20-alpine
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - printf "%s" "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ssh-add ~/.ssh/id_rsa
  script:
    - |
      ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SSH_HOST "cd /var/www/farmtrack && \
        git pull origin main && \
        echo 'MONGODB_URI_BASE=$MONGODB_URI_BASE' > .env && \
        echo 'MONGODB_URI_PARAMS=$MONGODB_URI_PARAMS' >> .env && \
        echo 'JWT_SECRET=$JWT_SECRET' >> .env && \
        docker compose -f /var/www/farmtrack/docker-compose.yml up --build -d"
  only:
    - main
  when: manual 